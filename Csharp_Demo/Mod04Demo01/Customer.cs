using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mod05Demo01
{
    public class Customer:IDisplay, IComparable//right click on IDisplay and select implement interface
    {
        private static int nextID = 1;
        public Customer()
        {
            // default Custome constructor
            ID = nextID++;
        }

        public Customer(string Name, CustomerStatusEnum Status, string Email):this()// constructor: to connect property to method parameter, constructor return Customer and there is no int or void etc
        {
            this.Name = Name;
            this.Status = Status;
            this.Email = (Email==null? Name+"@cust.com":Email);
        }
        public Customer(int ID, string Name)// constructor: to connect property to method parameter
        {

            this.Name = Name;
            this.Status = CustomerStatusEnum.Gold;
            this.Email = Name + "@cust.com";
        }

        public int ID { get; set; } // property
        public string Name { get; set; }
        public CustomerStatusEnum Status { get; set; }
        public string Email { get; set; }


        public string Details()// Method must have return
        {
            return string.Format("{0}\n{1}\n{2}\n{3}", ID, Name, Status, Email);
        }

        public int CompareTo(object obj)//Generated by IComparable
        {
            IDisplay other = obj as IDisplay;
            if (other != null)
            {
                return this.Name.CompareTo(other.Name);
            }
            return -1;
        }
    }

    public enum CustomerStatusEnum
    {
        Gold,
        Silver,
        Platinume
    }

    public class Prospect:IDisplay, IComparable
    {
        private static int nextID = -1;
        public Prospect()
        {
            ID = nextID--;
        }
        public Prospect(string Name,string PostalCode, string Email = null):this()
        {
            this.Name = Name;
            this.PostalCode = PostalCode;
            this.Email = (Email == null ? Name + "@cust.com" : Email);
        }

        public int ID { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string PostalCode { get; set; }//property


        public string Details()// Method must have return
        {
            return string.Format(" Prospect {0}\n{1}\n{2}\n{3}", ID, Name, PostalCode, Email);
        }

        public int CompareTo(object obj)//Generated by IComparable
        {
            IDisplay other = obj as IDisplay;
            if (other != null)
            {
                return this.Name.CompareTo(other.Name);
            }
            return -1;
        }
    }
}
